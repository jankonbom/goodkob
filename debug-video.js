// Debug vid√©o GitHub - Diagnostic complet
console.log('üîç === DEBUG VID√âO GITHUB ===');

// Fonction de debug principal
async function debugVideoDisplay() {
    console.log('üîç === DIAGNOSTIC COMPLET VID√âO ===');
    
    try {
        // 1. V√©rifier les articles avec leurs URLs
        console.log('üìã 1. R√©cup√©ration des articles...');
        const response = await fetch('https://aapicehoqxdwixbiqucs.supabase.co/rest/v1/articles?select=*', {
            headers: {
                'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhcGljZWhvcXhkd2l4YmlxdWNzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MzE5ODMsImV4cCI6MjA3MzAwNzk4M30.jBTeUfGBkVT0-5ElCD1NM6fCQCD7wnRpw4I2ulykLOQ',
                'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhcGljZWhvcXhkd2l4YmlxdWNzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MzE5ODMsImV4cCI6MjA3MzAwNzk4M30.jBTeUfGBkVT0-5ElCD1NM6fCQCD7wnRpw4I2ulykLOQ'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
        }
        
        const articles = await response.json();
        console.log(`‚úÖ ${articles.length} articles r√©cup√©r√©s`);
        
        // 2. Analyser chaque article
        console.log('üìã 2. Analyse des articles...');
        articles.forEach((article, index) => {
            console.log(`\nüì¶ Article ${index + 1}: ${article.name}`);
            console.log(`   ID: ${article.id}`);
            console.log(`   URL: ${article.image_url}`);
            
            if (article.image_url) {
                // V√©rifier si c'est une vid√©o GitHub
                const isGitHubVideo = article.image_url.includes('github.com') && 
                    article.image_url.match(/\.(mp4|webm|ogg|mov|avi|mkv)$/i);
                
                console.log(`   GitHub: ${article.image_url.includes('github.com')}`);
                console.log(`   Vid√©o: ${isGitHubVideo}`);
                
                if (isGitHubVideo) {
                    console.log(`   üé• VID√âO GITHUB D√âTECT√âE: ${article.image_url}`);
                }
            } else {
                console.log(`   ‚ùå Pas d'URL d'image`);
            }
        });
        
        // 3. Tester l'URL de votre vid√©o sp√©cifique
        console.log('\nüé• 3. Test de votre vid√©o sp√©cifique...');
        const testVideoUrl = 'https://raw.githubusercontent.com/jankonbom/imageforko/main/article_1758902278934.MOV';
        console.log(`URL test: ${testVideoUrl}`);
        
        // Cr√©er un √©l√©ment vid√©o de test
        const testVideo = document.createElement('video');
        testVideo.src = testVideoUrl;
        testVideo.controls = true;
        testVideo.style.width = '300px';
        testVideo.style.height = '200px';
        testVideo.style.border = '2px solid #00ff00';
        testVideo.style.margin = '10px';
        
        // Ajouter au body pour test visuel
        document.body.appendChild(testVideo);
        console.log('‚úÖ √âl√©ment vid√©o de test ajout√© au body');
        
        // 4. V√©rifier les √©l√©ments vid√©o existants
        console.log('\nüîç 4. V√©rification des √©l√©ments vid√©o existants...');
        const existingVideos = document.querySelectorAll('video');
        console.log(`Vid√©os trouv√©es sur la page: ${existingVideos.length}`);
        
        existingVideos.forEach((video, index) => {
            console.log(`Vid√©o ${index + 1}:`);
            console.log(`   Source: ${video.src}`);
            console.log(`   Visible: ${video.offsetWidth > 0 && video.offsetHeight > 0}`);
            console.log(`   Erreur: ${video.error ? video.error.message : 'Aucune'}`);
        });
        
        // 5. V√©rifier les cartes d'articles
        console.log('\nüîç 5. V√©rification des cartes d\'articles...');
        const productCards = document.querySelectorAll('.product-card');
        console.log(`Cartes d'articles trouv√©es: ${productCards.length}`);
        
        productCards.forEach((card, index) => {
            const title = card.querySelector('.product-title')?.textContent || 'Sans titre';
            const video = card.querySelector('video');
            const image = card.querySelector('img');
            
            console.log(`Carte ${index + 1}: ${title}`);
            console.log(`   Vid√©o: ${video ? 'Oui' : 'Non'}`);
            console.log(`   Image: ${image ? 'Oui' : 'Non'}`);
            
            if (video) {
                console.log(`   Source vid√©o: ${video.src}`);
                console.log(`   Erreur vid√©o: ${video.error ? video.error.message : 'Aucune'}`);
            }
        });
        
        return {
            articles: articles,
            testVideo: testVideo,
            existingVideos: existingVideos.length,
            productCards: productCards.length
        };
        
    } catch (error) {
        console.error('‚ùå Erreur debug:', error);
        return { error: error.message };
    }
}

// Fonction pour forcer le rechargement des vid√©os
function forceReloadVideos() {
    console.log('üîÑ Rechargement forc√© des vid√©os...');
    
    const videos = document.querySelectorAll('video');
    videos.forEach((video, index) => {
        console.log(`Rechargement vid√©o ${index + 1}: ${video.src}`);
        video.load();
        video.play().catch(e => console.log(`Erreur lecture vid√©o ${index + 1}:`, e.message));
    });
}

// Fonction pour tester une URL vid√©o sp√©cifique
function testVideoUrl(url) {
    console.log(`üé• Test de l'URL vid√©o: ${url}`);
    
    const video = document.createElement('video');
    video.src = url;
    video.controls = true;
    video.style.width = '400px';
    video.style.height = '300px';
    video.style.border = '3px solid #ff0000';
    video.style.margin = '20px';
    
    video.addEventListener('loadstart', () => console.log('üì° Chargement d√©marr√©'));
    video.addEventListener('loadeddata', () => console.log('‚úÖ Donn√©es charg√©es'));
    video.addEventListener('canplay', () => console.log('‚ñ∂Ô∏è Peut √™tre lu'));
    video.addEventListener('error', (e) => console.log('‚ùå Erreur:', e));
    
    document.body.appendChild(video);
    
    return video;
}

// Fonction pour v√©rifier la configuration GitHub
function checkGitHubConfig() {
    console.log('üîß === V√âRIFICATION CONFIGURATION GITHUB ===');
    
    if (typeof GITHUB_CONFIG !== 'undefined') {
        console.log('‚úÖ GITHUB_CONFIG trouv√©:');
        console.log(`   Username: ${GITHUB_CONFIG.username}`);
        console.log(`   Repository: ${GITHUB_CONFIG.repository}`);
        console.log(`   Token: ${GITHUB_CONFIG.token ? 'Configur√©' : 'Manquant'}`);
    } else {
        console.log('‚ùå GITHUB_CONFIG non trouv√©');
    }
    
    if (typeof uploadToGitHub !== 'undefined') {
        console.log('‚úÖ uploadToGitHub fonction trouv√©e');
    } else {
        console.log('‚ùå uploadToGitHub fonction non trouv√©e');
    }
}

// Fonction pour simuler la d√©tection de vid√©o
function testVideoDetection() {
    console.log('üß™ === TEST D√âTECTION VID√âO ===');
    
    const testUrls = [
        'https://raw.githubusercontent.com/jankonbom/imageforko/main/article_1758902278934.MOV',
        'https://example.com/video.mp4',
        'https://raw.githubusercontent.com/jankonbom/imageforko/main/image.jpg'
    ];
    
    testUrls.forEach(url => {
        const isVideo = url.includes('github.com') && url.match(/\.(mp4|webm|ogg|mov|avi|mkv)$/i);
        console.log(`URL: ${url}`);
        console.log(`Contient github.com: ${url.includes('github.com')}`);
        console.log(`Extension vid√©o: ${url.match(/\.(mp4|webm|ogg|mov|avi|mkv)$/i) ? 'Oui' : 'Non'}`);
        console.log(`D√©tect√©e comme vid√©o: ${isVideo ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log('---');
    });
}

// Export des fonctions
window.debugVideoDisplay = debugVideoDisplay;
window.forceReloadVideos = forceReloadVideos;
window.testVideoUrl = testVideoUrl;
window.checkGitHubConfig = checkGitHubConfig;
window.testVideoDetection = testVideoDetection;

console.log('üîç Debug vid√©o charg√©');
console.log('üìã Commandes disponibles:');
console.log('   debugVideoDisplay() - Diagnostic complet');
console.log('   forceReloadVideos() - Recharger les vid√©os');
console.log('   testVideoUrl(url) - Tester une URL sp√©cifique');
console.log('   checkGitHubConfig() - V√©rifier la config GitHub');
console.log('   testVideoDetection() - Tester la d√©tection');
