// üé• AUTOPLAY VIDEOS - Lancement automatique de toutes les vid√©os
console.log('üé• === AUTOPLAY VIDEOS ===');

// Fonction pour forcer le lancement de toutes les vid√©os
function forceAllVideosAutoplay() {
    console.log('üé• For√ßage du lancement de toutes les vid√©os...');
    
    const videos = document.querySelectorAll('video');
    console.log(`üìπ ${videos.length} vid√©os trouv√©es`);
    
    if (videos.length === 0) {
        console.log('‚ö†Ô∏è Aucune vid√©o trouv√©e, attente de 2 secondes...');
        setTimeout(forceAllVideosAutoplay, 2000);
        return;
    }
    
    videos.forEach((video, index) => {
        console.log(`üé¨ Configuration vid√©o ${index + 1}`);
        
        // Configuration optimis√©e
        video.controls = false;
        video.muted = true;
        video.loop = true;
        video.playsInline = true;
        video.autoplay = true;
        video.style.pointerEvents = 'none';
        video.style.outline = 'none';
        video.style.border = 'none';
        
        // Forcer le chargement
        video.load();
        
        // Essayer de lancer
        video.play().then(() => {
            console.log(`‚úÖ Vid√©o ${index + 1} lanc√©e avec succ√®s`);
        }).catch(e => {
            console.log(`‚ö†Ô∏è Vid√©o ${index + 1} bloqu√©e:`, e.message);
            
            // Retry multiple
            setTimeout(() => {
                video.play().then(() => {
                    console.log(`‚úÖ Vid√©o ${index + 1} lanc√©e en retry 1`);
                }).catch(e2 => {
                    setTimeout(() => {
                        video.play().then(() => {
                            console.log(`‚úÖ Vid√©o ${index + 1} lanc√©e en retry 2`);
                        }).catch(e3 => {
                            console.log(`‚ùå Vid√©o ${index + 1} d√©finitivement bloqu√©e`);
                        });
                    }, 1000);
                });
            }, 500);
        });
    });
    
    // Retry final apr√®s 3 secondes
    setTimeout(() => {
        console.log('üîÑ Retry final de toutes les vid√©os...');
        videos.forEach((video, index) => {
            if (video.paused) {
                video.play().then(() => {
                    console.log(`‚úÖ Vid√©o ${index + 1} lanc√©e en retry final`);
                }).catch(e => {
                    console.log(`‚ùå Vid√©o ${index + 1} toujours bloqu√©e`);
                });
            }
        });
    }, 3000);
}

// Fonction pour surveiller l'ajout de nouvelles vid√©os
function watchForNewVideos() {
    console.log('üëÄ Surveillance des nouvelles vid√©os...');
    
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1) { // Element node
                    const videos = node.querySelectorAll ? node.querySelectorAll('video') : [];
                    if (node.tagName === 'VIDEO') {
                        videos.push(node);
                    }
                    
                    videos.forEach(video => {
                        console.log('üé¨ Nouvelle vid√©o d√©tect√©e, configuration...');
                        
                        // Configuration optimis√©e
                        video.controls = false;
                        video.muted = true;
                        video.loop = true;
                        video.playsInline = true;
                        video.autoplay = true;
                        video.style.pointerEvents = 'none';
                        video.style.outline = 'none';
                        video.style.border = 'none';
                        
                        // Forcer le chargement et lancement
                        video.load();
                        video.play().catch(e => {
                            console.log('‚ö†Ô∏è Nouvelle vid√©o bloqu√©e:', e.message);
                        });
                    });
                }
            });
        });
    });
    
    observer.observe(document.body, { childList: true, subtree: true });
}

// Fonction pour lancer toutes les vid√©os avec interaction
function unlockAllVideos() {
    console.log('üîì D√©blocage de toutes les vid√©os avec interaction...');
    
    const videos = document.querySelectorAll('video');
    videos.forEach((video, index) => {
        video.play().then(() => {
            console.log(`‚úÖ Vid√©o ${index + 1} d√©bloqu√©e`);
        }).catch(e => {
            console.log(`‚ùå Vid√©o ${index + 1} toujours bloqu√©e`);
        });
    });
}

// Export des fonctions
window.forceAllVideosAutoplay = forceAllVideosAutoplay;
window.watchForNewVideos = watchForNewVideos;
window.unlockAllVideos = unlockAllVideos;

// Auto-lancement au chargement
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé• Auto-lancement des vid√©os au chargement...');
    
    // Lancer imm√©diatement
    setTimeout(forceAllVideosAutoplay, 1000);
    
    // Surveiller les nouvelles vid√©os
    watchForNewVideos();
    
    // Retry apr√®s 5 secondes
    setTimeout(forceAllVideosAutoplay, 5000);
});

// √âcouter les interactions pour d√©bloquer
document.addEventListener('click', unlockAllVideos, { once: true });
document.addEventListener('touchstart', unlockAllVideos, { once: true });

console.log('üé• Syst√®me d\'autoplay vid√©os charg√©');
console.log('üí° Utilisez: forceAllVideosAutoplay() pour forcer le lancement');
console.log('üí° Utilisez: unlockAllVideos() pour d√©bloquer avec interaction');
