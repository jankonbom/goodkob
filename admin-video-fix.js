// Fix pour l'affichage des vid√©os GitHub dans le panel admin
console.log('üîß === FIX VID√âOS GITHUB PANEL ADMIN ===');

// Fonction pour d√©tecter si une URL est une vid√©o GitHub
function isGitHubVideo(url) {
    if (!url) return false;
    
    console.log(`üîç Test d√©tection vid√©o: ${url}`);
    console.log(`   Longueur de l'URL: ${url.length}`);
    console.log(`   Type: ${typeof url}`);
    
    // Debug plus profond pour d√©tecter les caract√®res invisibles
    console.log(`   Contient 'github.com': ${url.includes('github.com')}`);
    console.log(`   Contient 'github': ${url.includes('github')}`);
    console.log(`   Contient 'raw.githubusercontent': ${url.includes('raw.githubusercontent')}`);
    
    // Test avec indexOf
    const githubIndex = url.indexOf('github.com');
    console.log(`   Index de 'github.com': ${githubIndex}`);
    
    // Test avec une URL nettoy√©e
    const cleanUrl = url.trim();
    console.log(`   URL nettoy√©e: ${cleanUrl}`);
    console.log(`   URL nettoy√©e contient github.com: ${cleanUrl.includes('github.com')}`);
    
    // Test avec une URL reconstruite
    const reconstructedUrl = url.replace(/\s+/g, '');
    console.log(`   URL reconstruite: ${reconstructedUrl}`);
    console.log(`   URL reconstruite contient github.com: ${reconstructedUrl.includes('github.com')}`);
    
    const isVideo = url.includes('github.com') && url.match(/\.(mp4|webm|ogg|mov|avi|mkv)$/i);
    console.log(`   R√©sultat: ${isVideo ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    return isVideo;
}

// Fonction pour corriger l'affichage des vid√©os dans le panel admin
function fixAdminVideoDisplay() {
    console.log('üîß Correction de l\'affichage des vid√©os dans le panel admin...');
    
    // Attendre que les articles soient charg√©s
    setTimeout(() => {
        const articleCards = document.querySelectorAll('.article-card');
        console.log(`üìã ${articleCards.length} cartes d'articles trouv√©es`);
        
        articleCards.forEach((card, index) => {
            const imageContainer = card.querySelector('.article-image-container');
            const imageElement = card.querySelector('.article-image');
            
            if (imageContainer && imageElement) {
                const imageUrl = imageElement.src;
                console.log(`üîç Carte ${index + 1}: ${imageUrl}`);
                
                // Utiliser la fonction alternative qui fonctionne
                if (isGitHubVideoAlternative(imageUrl)) {
                    console.log(`üé• Vid√©o GitHub d√©tect√©e: ${imageUrl}`);
                    
                    // Remplacer l'image par une vid√©o
                    const videoElement = document.createElement('video');
                    videoElement.src = imageUrl;
                    videoElement.controls = true;
                    videoElement.style.width = '100%';
                    videoElement.style.height = '100%';
                    videoElement.style.objectFit = 'cover';
                    videoElement.style.borderRadius = '8px';
                    videoElement.setAttribute('playsinline', 'true');
                    videoElement.setAttribute('webkit-playsinline', 'true');
                    
                    // Remplacer l'√©l√©ment image par la vid√©o
                    imageElement.parentNode.replaceChild(videoElement, imageElement);
                    
                    console.log(`‚úÖ Vid√©o remplac√©e pour la carte ${index + 1}`);
                }
            }
        });
    }, 1000);
}

// Fonction pour corriger l'affichage des vid√©os dans les modals
function fixModalVideoDisplay() {
    console.log('üîß Correction de l\'affichage des vid√©os dans les modals...');
    
    // Observer les changements dans les modals
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1) { // Element node
                        const videoElements = node.querySelectorAll('video');
                        videoElements.forEach(video => {
                            if (isGitHubVideo(video.src)) {
                                console.log('üé• Vid√©o GitHub d√©tect√©e dans modal:', video.src);
                                video.controls = true;
                                video.style.width = '100%';
                                video.style.height = '200px';
                                video.style.objectFit = 'cover';
                                video.setAttribute('playsinline', 'true');
                                video.setAttribute('webkit-playsinline', 'true');
                            }
                        });
                    }
                });
            }
        });
    });
    
    // Observer les changements dans le body
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// Fonction pour corriger l'affichage des vid√©os dans la pr√©visualisation
function fixPreviewVideoDisplay() {
    console.log('üîß Correction de l\'affichage des vid√©os dans la pr√©visualisation...');
    
    const previewContainer = document.getElementById('livePreview');
    if (previewContainer) {
        const videoElements = previewContainer.querySelectorAll('video');
        videoElements.forEach(video => {
            if (isGitHubVideo(video.src)) {
                console.log('üé• Vid√©o GitHub d√©tect√©e dans pr√©visualisation:', video.src);
                video.controls = true;
                video.style.width = '100%';
                video.style.height = '200px';
                video.style.objectFit = 'cover';
                video.setAttribute('playsinline', 'true');
                video.setAttribute('webkit-playsinline', 'true');
            }
        });
    }
}

// Fonction pour corriger l'affichage des vid√©os dans la fonction loadExistingMedia
function fixLoadExistingMedia() {
    console.log('üîß Correction de la fonction loadExistingMedia...');
    
    // Override de la fonction loadExistingMedia si elle existe
    if (typeof loadExistingMedia === 'function') {
        const originalLoadExistingMedia = loadExistingMedia;
        
        loadExistingMedia = function(url) {
            console.log('üñºÔ∏è loadExistingMedia appel√©e avec:', url);
            
            if (isGitHubVideo(url)) {
                console.log('üé• Vid√©o GitHub d√©tect√©e dans loadExistingMedia');
                
                const preview = document.getElementById('mediaPreview');
                const previewImg = document.getElementById('previewImg');
                const previewVideo = document.getElementById('previewVideo');
                const uploadZone = document.getElementById('mediaUploadZone');

                if (preview && previewImg && previewVideo && uploadZone) {
                    uploadZone.style.display = 'none';
                    preview.style.display = 'block';
                    
                    // Afficher la vid√©o
                    previewVideo.src = url;
                    previewVideo.style.display = 'block';
                    previewImg.style.display = 'none';
                    previewVideo.controls = true;
                    previewVideo.style.width = '100%';
                    previewVideo.style.height = '200px';
                    previewVideo.style.objectFit = 'cover';
                    previewVideo.setAttribute('playsinline', 'true');
                    previewVideo.setAttribute('webkit-playsinline', 'true');
                    
                    console.log('‚úÖ Vid√©o affich√©e dans le modal');
                }
            } else {
                // Appeler la fonction originale pour les images
                return originalLoadExistingMedia(url);
            }
        };
    }
}

// Fonction principale pour corriger tous les affichages de vid√©os
function fixAllVideoDisplays() {
    console.log('üîß === CORRECTION COMPL√àTE DES VID√âOS ===');
    
    // Corriger l'affichage des cartes d'articles
    fixAdminVideoDisplay();
    
    // Corriger l'affichage des modals
    fixModalVideoDisplay();
    
    // Corriger l'affichage de la pr√©visualisation
    fixPreviewVideoDisplay();
    
    // Corriger la fonction loadExistingMedia
    fixLoadExistingMedia();
    
    console.log('‚úÖ Toutes les corrections appliqu√©es');
}

// Fonction alternative pour d√©tecter les vid√©os GitHub
function isGitHubVideoAlternative(url) {
    if (!url) return false;
    
    // Nettoyer l'URL
    const cleanUrl = url.trim().replace(/\s+/g, '');
    
    // V√©rifier avec plusieurs m√©thodes
    const hasGithub1 = cleanUrl.includes('github.com');
    const hasGithub2 = cleanUrl.includes('raw.githubusercontent');
    const hasGithub3 = cleanUrl.indexOf('github.com') !== -1;
    
    // V√©rifier l'extension vid√©o
    const hasVideoExt = cleanUrl.match(/\.(mp4|webm|ogg|mov|avi|mkv)$/i);
    
    console.log(`üîç Alternative test pour: ${cleanUrl}`);
    console.log(`   github.com (includes): ${hasGithub1}`);
    console.log(`   raw.githubusercontent: ${hasGithub2}`);
    console.log(`   github.com (indexOf): ${hasGithub3}`);
    console.log(`   Extension vid√©o: ${hasVideoExt ? hasVideoExt[0] : 'Non'}`);
    
    const isVideo = (hasGithub1 || hasGithub2 || hasGithub3) && hasVideoExt;
    console.log(`   R√©sultat alternatif: ${isVideo ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    return isVideo;
}

// Fonction pour tester la d√©tection de vid√©os
function testVideoDetection() {
    console.log('üß™ === TEST D√âTECTION VID√âOS ===');
    
    const testUrls = [
        'https://raw.githubusercontent.com/jankonbom/imageforko/main/article_1758902278934.MOV',
        'https://example.com/video.mp4',
        'https://raw.githubusercontent.com/jankonbom/imageforko/main/image.jpg'
    ];
    
    testUrls.forEach(url => {
        console.log(`\nüîç Test URL: ${url}`);
        
        // Test avec la fonction originale
        console.log('--- FONCTION ORIGINALE ---');
        isGitHubVideo(url);
        
        // Test avec la fonction alternative
        console.log('--- FONCTION ALTERNATIVE ---');
        isGitHubVideoAlternative(url);
        
        console.log('---');
    });
}

// Fonction pour tester avec la vraie URL de votre vid√©o
function testRealVideo() {
    console.log('üé• === TEST AVEC VRAIE VID√âO ===');
    
    const realVideoUrl = 'https://raw.githubusercontent.com/jankonbom/imageforko/main/article_1758902278934.MOV';
    console.log(`URL r√©elle: ${realVideoUrl}`);
    
    console.log('--- FONCTION ORIGINALE ---');
    const result1 = isGitHubVideo(realVideoUrl);
    console.log(`R√©sultat original: ${result1 ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    console.log('--- FONCTION ALTERNATIVE ---');
    const result2 = isGitHubVideoAlternative(realVideoUrl);
    console.log(`R√©sultat alternatif: ${result2 ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    return result1 || result2;
}

// Fonction pour corriger les URLs Cloudinary dans la base de donn√©es
async function fixCloudinaryUrls() {
    console.log('üîß Correction des URLs Cloudinary dans la base de donn√©es...');
    
    try {
        // R√©cup√©rer tous les articles avec des URLs Cloudinary
        const { data: articles, error } = await supabaseClient
            .from('articles')
            .select('*')
            .like('image_url', '%cloudinary%');
        
        if (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des articles:', error);
            return;
        }
        
        console.log(`üìã ${articles.length} articles avec URLs Cloudinary trouv√©s`);
        
        for (const article of articles) {
            console.log(`üîÑ Correction de l'article: ${article.name}`);
            console.log(`   URL actuelle: ${article.image_url}`);
            
            // Cr√©er une nouvelle URL GitHub bas√©e sur le nom de l'article
            const fileName = article.image_url.split('/').pop(); // R√©cup√©rer le nom du fichier
            const newUrl = `https://raw.githubusercontent.com/jankonbom/imageforko/main/${fileName}`;
            
            console.log(`   Nouvelle URL: ${newUrl}`);
            
            // Mettre √† jour l'article dans la base de donn√©es
            const { error: updateError } = await supabaseClient
                .from('articles')
                .update({ image_url: newUrl })
                .eq('id', article.id);
            
            if (updateError) {
                console.error(`‚ùå Erreur lors de la mise √† jour de l'article ${article.name}:`, updateError);
            } else {
                console.log(`‚úÖ Article ${article.name} mis √† jour avec succ√®s`);
            }
        }
        
        console.log('üéâ Correction des URLs termin√©e !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction des URLs:', error);
    }
}

// Fonction pour lister tous les articles avec des URLs Cloudinary
async function listCloudinaryArticles() {
    console.log('üìã Liste des articles avec URLs Cloudinary...');
    
    try {
        const { data: articles, error } = await supabaseClient
            .from('articles')
            .select('id, name, image_url')
            .like('image_url', '%cloudinary%');
        
        if (error) {
            console.error('‚ùå Erreur:', error);
            return;
        }
        
        console.log(`üìä ${articles.length} articles trouv√©s:`);
        articles.forEach((article, index) => {
            console.log(`${index + 1}. ${article.name}`);
            console.log(`   ID: ${article.id}`);
            console.log(`   URL: ${article.image_url}`);
            console.log('---');
        });
        
        return articles;
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

// Export des fonctions
window.isGitHubVideo = isGitHubVideo;
window.isGitHubVideoAlternative = isGitHubVideoAlternative;
window.fixAdminVideoDisplay = fixAdminVideoDisplay;
window.fixModalVideoDisplay = fixModalVideoDisplay;
window.fixPreviewVideoDisplay = fixPreviewVideoDisplay;
window.fixLoadExistingMedia = fixLoadExistingMedia;
window.fixAllVideoDisplays = fixAllVideoDisplays;
window.testVideoDetection = testVideoDetection;
window.testRealVideo = testRealVideo;
window.fixCloudinaryUrls = fixCloudinaryUrls;
window.listCloudinaryArticles = listCloudinaryArticles;

// Auto-correction au chargement
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Auto-correction des vid√©os au chargement...');
    setTimeout(fixAllVideoDisplays, 2000);
});

console.log('üîß Fix vid√©os GitHub charg√©');
console.log('üìã Commandes disponibles:');
console.log('   fixAllVideoDisplays() - Corriger tous les affichages');
console.log('   testVideoDetection() - Tester la d√©tection');
console.log('   fixAdminVideoDisplay() - Corriger les cartes d\'articles');
console.log('   fixModalVideoDisplay() - Corriger les modals');
console.log('   fixPreviewVideoDisplay() - Corriger la pr√©visualisation');
